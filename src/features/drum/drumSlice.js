import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  status: 'idle',
  volume: 0.5, 
  display:'FCC Drum Machine',
  bank: true,
  dark: true
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'drum/fetchDrum',
//   async (amount) => {
//     const response = await fetchDrum(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const drumerSlice = createSlice({
  name: 'drum',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateDisplay: (state , action) => {
      state.display = action.payload
    },
    changeVolume: (state, action) => {
      state.volume = action.payload
    },
    switchBank: (state) => {
      state.bank = !state.bank;
      state.dark = !state.dark
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { updateDisplay, changeVolume, switchBank, switchDark } = drumerSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.drum.value)`
export const selectDrum = (state) => state.drum;
export const selectVolume = (state) => state.drum.volume;
export const selectDisplay = (state) => state.drum.display;
export const selectBank = (state) => state.drum.bank;
export const selectDark = (state) => state.drum.dark;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectDrum(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default drumerSlice.reducer;
